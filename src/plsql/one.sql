declare
N number := 5;
    FUNCTION fn_numbers(n number) return number IS
BEGIN
        if (n=0) then return 0; end if;

return n+fn_numbers(n-1);

END fn_numbers;
BEGIN
        DBMS_OUTPUT.PUT_LINE(fn_numbers(n));
end;
/
--------

DECLARE
i NUMBER := 1;
BEGIN
    WHILE i <= 20 LOOP
            IF MOD(i, 2) = 0 THEN
                DBMS_OUTPUT.PUT_LINE(i);
END IF;
            i := i + 1;
END LOOP;
END;
/

--check if the given number is prime or not and take input from user
SET SERVEROUTPUT ON;
SET DEFINE OFF;
DECLARE
    -- Change this number to check for different values
    n NUMBER := &n_input; -- Input from user
    is_prime BOOLEAN := TRUE;
BEGIN
    IF n <= 1 THEN
        is_prime := FALSE;
    ELSE
        FOR i IN 2..TRUNC(SQRT(n)) LOOP
            IF MOD(n, i) = 0 THEN
                is_prime := FALSE;
                EXIT;
            END IF;
        END LOOP;
    END IF;

    IF is_prime THEN
        DBMS_OUTPUT.PUT_LINE(n || ' is a prime number.');
    ELSE
        DBMS_OUTPUT.PUT_LINE(n || ' is not a prime number.');
    END IF;
end;
/

---trigger
CREATE OR REPLACE TRIGGER trg_before_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary cannot be negative.');
    END IF;
END;
/
select * from EMPLOYEES;
/
--insert into employees with next value of id

INSERT INTO employees (EMPLOYEE_ID, FIRST_NAME,LAST_NAME, salary,PHONE_NUMBER , JOB_ID,EMAIL , HIRE_DATE)
VALUES (employees_seq.NEXTVAL, 'John', 'CH',50000,
        '1234567890', 'IT_PROG','Email@123.com'
       , SYSDATE);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME,LAST_NAME, salary,PHONE_NUMBER , JOB_ID,EMAIL , HIRE_DATE)
VALUES (employees_seq.NEXTVAL, 'Jane', 'Doe',-60000,
        '0987654321', 'HR_REP','kkk@123.com',SYSDATE);
-- This will raise an error due to the trigger
commit;

---create new table users
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR2(50) NOT NULL,
    password VARCHAR2(50) NOT NULL,
    email VARCHAR2(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id)
);

--create a view to show users with email
CREATE OR REPLACE VIEW user_emails AS
SELECT user_id, username, email
FROM users
WHERE email IS NOT NULL;